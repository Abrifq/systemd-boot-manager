#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  zz-update-systemd-boot
#
#  Copyright 2021 Thomas Castleman <contact@draugeros.org>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#
"""Keep systemd-boot up-to-date with installed kernels and new systemd-boot versions"""
from __future__ import print_function
from distutils.version import LooseVersion
import sys
import os
import shutil
import subprocess
import json
import distro

GREEN = "\033[92m"
RED = "\033[91m"
CLEAR = "\033[0m"
YELLOW = "\033[93m"
BLUE = '\033[94m'
NAME = GREEN + "systemd-boot-manager" + CLEAR
NEEDED_FILES = ["config", "initrd.img", "System.map", "vmlinuz"]
WARNING = NAME + "\t" + YELLOW + "WARNING: "
ERROR = NAME + "\t" + RED + "ERROR: "
STATUS = NAME + "\t" + BLUE
SUCCESS = NAME + "\t" + GREEN
DISTRO = distro.name().replace(" ", "_")
VERBOSE = False

# Important Dirs/Files
BOOT_DIR = "/boot/"
CLEAN_DIR = BOOT_DIR + "efi/loader/entries/"
LOADER_DIR = BOOT_DIR + "efi/" + DISTRO + "/"
CONF_FILE = ["/boot/efi/loader/entries/" + DISTRO, ".conf"]
ENTRY_CONF = "/etc/systemd-boot-manager/default_entry.conf"

# Default Flags
ROOT_FLAGS = "quiet splash"
RECOVERY_FLAGS = "ro recovery nomodeset"

# Default Loader Conf File
# We have to edit this in several places, multiple different times.
# Having the default file as a list like this will make that faster
CONF_FILE_CONTENTS = ["title  " + DISTRO, "linux   /" + DISTRO + "/vmlinuz",
                      "initrd  /" + DISTRO + "/initrd.img", "options root=PARTUUID="]
if len(sys.argv) > 1:
    if sys.argv[1] == "-v":
        VERBOSE = True

# Print to stderr
def __eprint__(*args, **kwargs):
    """Make it easier for us to print to stderr"""
    print(*args, file=sys.stderr, **kwargs)


def check_for_files(files):
    """Check for files needed.

    Returns True if all files are present,
    False if any file is missing.
    """
    for each in files:
        if not os.path.exists(each):
            return False
    return True


def failure(exit_code):
    """Consistent Failure output"""
    __eprint__(NAME + "\t" + RED + "SYSTEMD-BOOT UPDATES FAILED!" + CLEAR)
    sys.exit(exit_code)


def warning(output):
    __eprint__(WARNING + output + CLEAR)


def get_esp_part_used():
    """Get amount of ESP partition used"""
    used = subprocess.check_output(["du", "-bs", "/boot/efi"]).decode()
    return int(used.split("\t")[0])


# Check to make sure we are running as Python3, not 2
if sys.version_info[0] == 2:
    __eprint__(ERROR + "Please run with Python 3 as Python 2 is End-of-Life." + CLEAR)
    sys.exit(2)

if os.path.isfile("/etc/systemd-boot-manager/disable.flag"):
    __eprint__(WARNING + "systemd-boot-manager is disabled. Exiting without modifying anything." + CLEAR)
    __eprint__(STATUS + "You can re-enable systemd-boot-manager with `sudo update-systemd-boot --enable'" + CLEAR)
    sys.exit(0)

print(STATUS + "UPDATING KERNELS AVAILABLE TO SYSTEMD-BOOT" + CLEAR)
# Get our UUID
with open("/etc/systemd-boot-manager/UUID.conf", "r") as uuid_conf:
    UUID = uuid_conf.read()

# Make sure that if there is a trailing new line, we parse it out
UUID = UUID.split("\n")[0]

# Get size of /boot/efi partition
PARTS = json.loads(subprocess.check_output(["lsblk", "--output",
                                            "TYPE,SIZE,NAME,MOUNTPOINT",
                                            "--json",
                                            "--bytes"]).decode().replace("I","i"))["blockdevices"]

for each in range(len(PARTS) - 1, -1, -1):
    if ((PARTS[each]["type"] != "disk") or ("children" not in PARTS[each])):
        del PARTS[each]

ESP_SIZE = 0
for each in PARTS:
    for each1 in each["children"]:
        if "mountpoint" not in each1:
            continue
        if each1["mountpoint"] == "/boot/efi":
            ESP_SIZE = each1["size"]
            break
    if ESP_SIZE != 0:
        break

# Do a quick bit of clean up
del each, PARTS

# Get our kernels
KERNELS = os.listdir(BOOT_DIR)

# Filter down to just the Kernel Images
for each in range(len(KERNELS) - 1, -1, -1):
    if "vmlinuz-" not in KERNELS[each]:
        del KERNELS[each]
    # Remove dpkg-tmp images
    elif ".dpkg-tmp" in KERNELS[each][-9:]:
        del KERNELS[each]
    else:
        # These are kernel images. We need to make this their full file path.
        KERNELS[each] = BOOT_DIR + KERNELS[each]

# Check to make sure we have kernels to work with
if len(KERNELS) < 1:
    __eprint__(ERROR + "NO KERNELS FOUND IN /boot" + CLEAR)
    failure(1)

# Perform a nuclear clean to ensure everything is always in perfect sync.
# We need to make sure we have some error catching here. Hence all the try/except blocks
try:
    DEATH_ROW = os.listdir(CLEAN_DIR)
    for each in DEATH_ROW:
        if each[-5:] == ".conf":
            try:
                os.remove(CLEAN_DIR + each)
            except FileNotFoundError:
                pass
            except PermissionError:
                __eprint__(ERROR + "CANNOT CLEAN ENTRIES DIRECTORY. RUNNING AS ROOT?")
                failure(2)
except FileNotFoundError:
    warning("PREVIOUS ENTRIES NOT FOUND. NOT CLEANING.")

try:
    shutil.rmtree(LOADER_DIR)
except FileNotFoundError:
    pass
except PermissionError:
    __eprint__(ERROR + "CANNOT DELETE LOADER DIRECTORY. RUNNING AS ROOT?")
    failure(2)
except NotADirectoryError:
    os.remove(LOADER_DIR)

try:
    os.mkdir(LOADER_DIR)
except FileExistsError:
    pass
except PermissionError:
    __eprint__(ERROR + "CANNOT REMAKE LOADER DIRECTORY. RUNNING AS ROOT?")
    failure(2)


# Copy the latest kernel files to a consistent place so we can keep
# using the same loader configuration
for each in enumerate(KERNELS):
    KERNELS[each[0]] = KERNELS[each[0]][14:]

try:
    del KERNELS[KERNELS.index(".old")]
except ValueError:
    pass

# Sort remaining kernels, get latest
KERNELS = sorted(KERNELS, key=LooseVersion)
LATEST = KERNELS[-1]

# Delete latest kernel from the list, so we don't have two entries for it
del KERNELS[-1]

# Let the user know what kernel they will be booting with next time
print(NAME + "\t" + GREEN + LATEST + CLEAR)

# Time for the real work
# We need to make sure the files we need ACTUALLY EXIST first
# Otherwise we can end up with a FileNotFoundError
NEEDED_FILES1 = []
for FILE in NEEDED_FILES:
    NEEDED_FILES1.append(BOOT_DIR + FILE + "-" + LATEST)
if check_for_files(NEEDED_FILES1):
    # We know the files we need exist. Copy them.
    for each in enumerate(NEEDED_FILES1):
        try:
            if VERBOSE:
                print(NEEDED_FILES1[each[0]] + " -> " + LOADER_DIR + NEEDED_FILES[each[0]])
            shutil.copyfile(NEEDED_FILES1[each[0]], LOADER_DIR + NEEDED_FILES[each[0]])
        except FileExistsError:
            os.remove(LOADER_DIR + NEEDED_FILES[each[0]])
            shutil.copyfile(NEEDED_FILES1[each[0]], LOADER_DIR + NEEDED_FILES[each[0]])
        except PermissionError:
            __eprint__(ERROR + "CANNOT COPY LOADER FILES. RUNNING AS ROOT?" + CLEAR)
            failure(2)
else:
    __eprint__(WARNING + "SOME FILE THAT IS NEEDED DOES NOT EXIST." + CLEAR)
    __eprint__(WARNING + "IT WILL LIKELY BE GENERATED LATER." + CLEAR)
    __eprint__(WARNING + "DIFFERING UPDATE." + CLEAR)
    __eprint__(WARNING + "IF YOU DO NOT GET A SUCCESSFUL UPDATE LATER" + CLEAR)
    __eprint__(WARNING + "CALL `sudo update-systemd-boot' TO MANUALLY" + CLEAR)
    __eprint__(WARNING + "TRIGGER THE UPDATE. IF YOU STILL HAVE ISSUES" + CLEAR)
    __eprint__(WARNING + "SOMETHING ELSE MAY BE WRONG." + CLEAR)
    sys.exit()

# Make sure directory structure is good
if not os.path.exists(CLEAN_DIR):
    dir = ""
    for each in CLEAN_DIR.split("/"):
        if dir == "/":
            dir = dir + each
        else:
            dir = dir + "/" + each
        try:
            os.mkdir(dir)
        except FileExistsError:
            pass

# Generate Config Files
with open("".join(CONF_FILE), "w+") as output:
    output.write("\n".join(CONF_FILE_CONTENTS) + UUID + " " + ROOT_FLAGS)
with open("_Recovery".join(CONF_FILE), "w+") as output:
    for each in enumerate(CONF_FILE_CONTENTS):
        if each[0] == 0:
            output.write(CONF_FILE_CONTENTS[each[0]] + " Recovery")
        else:
            output.write(CONF_FILE_CONTENTS[each[0]])
        output.write("\n")


# Legacy Kernel Support
LOW_SPACE_BREAK = False
LOW_SPACE_LIMIT = 83886080
if len(KERNELS) >= 1:
    for VERSION in KERNELS:
        # Let the user know they have a legacy kernel, in case something breaks
        # And mark it clearly as legacy by putting the "LEGACY" in Blue, in all caps
        REMAINING = ESP_SIZE - get_esp_part_used()
        if REMAINING < LOW_SPACE_LIMIT:
            LOW_SPACE_BREAK = True
            break
        print(NAME + "\t" + GREEN + VERSION + BLUE + "\t(LEGACY)" + CLEAR)
        for FILE in NEEDED_FILES:
            try:
                if VERBOSE:
                    print(BOOT_DIR + FILE + "-" + VERSION + " -> " + LOADER_DIR + FILE + "-" + VERSION)
                shutil.copyfile(BOOT_DIR + FILE + "-" + VERSION, LOADER_DIR + FILE + "-" + VERSION)
            except FileExistsError:
                os.remove(LOADER_DIR + FILE)
                shutil.copyfile(BOOT_DIR + FILE + "-" + VERSION, LOADER_DIR + FILE + "-" + VERSION)
            except PermissionError:
                __eprint__(ERROR + "CANNOT COPY LEGACY LOADER FILES. RUNNING AS ROOT?")
                failure(2)
        with open(("-" + VERSION).join(CONF_FILE), "w+") as output:
            line = 0
            for each in CONF_FILE_CONTENTS:
                if line == 0:
                    output.write(each + " " + VERSION + "\n")
                elif line in (1, 2):
                    output.write(each + "-" + VERSION + "\n")
                else:
                    output.write(each + UUID + " " + ROOT_FLAGS)
                line += 1
        # Also make sure they have Legacy recovery. Cause it can be a life saver.
        with open(("-" + VERSION + "_Recovery").join(CONF_FILE), "w+") as output:
            line = 0
            for each in CONF_FILE_CONTENTS:
                if line == 0:
                    output.write(each + " " + VERSION + " Recovery\n")
                elif line in (1, 2):
                    output.write(each + "-" + VERSION + "\n")
                else:
                    output.write(each + UUID + " " + RECOVERY_FLAGS)
                line += 1

# Finally, we are done! Woot!
# ... With the Kernels ...
# Now for systemd-boot
REMAINING = ESP_SIZE - get_esp_part_used()
if REMAINING < 1048576:
    __eprint__(ERROR + "NOT ENOUGH SPACE ON DRIVE TO UPDATE SYSTEMD-BOOT")
    failure(1)
print(STATUS + "UPDATING SYSTEMD-BOOT VERSIONS" + CLEAR)
os.putenv("SYSTEMD_RELAX_ESP_CHECKS", "1")
try:
    subprocess.check_call(["bootctl", "update"])
except subprocess.CalledProcessError:
    __eprint__(ERROR + "BOOTCTL HAS HAD AN ERROR!" + CLEAR)
    failure(2)

# Get default bootloader entry
DEFAULT = subprocess.check_output(["bootctl", "list", "--no-pager"]).decode().split("\n")
ENTRIES = []
AE = []
TOGGLE = False
for each in range(len(DEFAULT) - 1, -1, -1):
    if (("title: " in DEFAULT[each]) or ("id: " in DEFAULT[each])):
        if "firmware" in DEFAULT[each].lower():
            continue
        AE.append(list(filter(lambda x: x != "", DEFAULT[each].split(" ")))[-1])
        if TOGGLE:
            ENTRIES.append(AE)
            AE = []
            TOGGLE = False
        else:
            TOGGLE = True


for each in ENTRIES:
    if "(default)" in each:
        DEFAULT = each[0]
        break

# Read Default.conf, find what default entry SHOULD be
# We do this so that if this entry is lost after a CMOS clear, it can be restored.
INTENDED_DEFAULT = "#"
if os.path.isfile(ENTRY_CONF):
    with open(ENTRY_CONF, "r") as conf:
        INTENDED_DEFAULT = conf.read().split()[0]

# Check default entry, change if needed
if INTENDED_DEFAULT != "#":
    if INTENDED_DEFAULT != DEFAULT:
        warning("WRONG BOOT ENTRY DEFAULT DETECTED")
        warning("DEFAULT WAS: " + DEFAULT)
        warning("RESETTING DEFAULT")
        try:
            subprocess.check_call(["bootctl", "set-default", INTENDED_DEFAULT])
        except subprocess.CalledProcessError:
            __eprint__(ERROR + "CANNOT SET INTENDED DEFAULT" + CLEAR)
            failure(1)
        print(SUCCESS + "SUCCESSFULLY RESET DEFAULT BOOT ENTRY" + CLEAR)



if LOW_SPACE_BREAK:
    warning("NOT ENOUGH SPACE ON /boot/efi TO SET UP ALL LEGACY KERNELS")
    warning("YOUR SYSTEM WILL STILL BOOT, BUT WILL NOT BE ABLE TO BOOT USING")
    warning("ALL INSTALLED KERNELS. UNINSTALL SOME KERNELS TO FIX THIS WARNING.")
print(SUCCESS + "SYSTEMD-BOOT UPDATES COMPLETE!" + CLEAR)
