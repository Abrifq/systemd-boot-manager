#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  update-systemd-boot
#
#  Copyright 2021 Thomas Castleman <contact@draugeros.org>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#
"""Trigger zz-update-systemd-boot"""
from __future__ import print_function
import sys
import subprocess
import os
import json

GREEN = "\033[92m"
RED = "\033[91m"
CLEAR = "\033[0m"
YELLOW = "\033[93m"
BLUE = '\033[94m'
NAME = GREEN + "systemd-boot-manager" + CLEAR
WARNING = NAME + "\t" + YELLOW + "WARNING: "
ERROR = NAME + "\t" + RED + "ERROR: "
STATUS = NAME + "\t" + BLUE
SUCCESS = NAME + "\t" + GREEN

CONFIG_DIR = "/etc/systemd-boot-manager"
UUID_FILE = CONFIG_DIR + "/UUID.conf"
DEFAULTS_FILE = CONFIG_DIR + "/default_entry.conf"

VERSION = "0.1.2-alpha1"
HELP = """systemd-boot-manager, Version: %s

    -c, --check                         Check systemd-boot-manager settings.
    -e, --enable                        Enable systemd-boot-manager.
    -d, --default [bootloader entry]    Set as default bootloader entry.
        --disable                       Disable systemd-boot-manager.
    -h, --help                          Print this help dialog and exit.
    -l, --list                          List all bootloader entries.
    -r, --repair                        Repair systemd-boot-manager settings and systemd-boot.
    -s, --show-settings                 Show current settings.
    -u, --update                        Update systemd-boot, default action.
    -v, --version                       Print current version and exit.""" % (VERSION)


def __eprint__(*args, **kwargs):
    """Make it easier for us to print to stderr"""
    print(*args, file=sys.stderr, **kwargs)


if sys.version_info[0] == 2:
    __eprint__(ERROR + "Please run with Python 3 as Python 2 is End-of-Life.")
    sys.exit(2)


def is_root():
    """Check if we have root"""
    return (os.geteuid() == 0)

def trigger():
    """Trigger systemd-boot update"""
    if not is_root():
        __eprint__(ERROR + "You need to be run this program as root to update systemd-boot." + CLEAR)
        sys.exit(2)
    try:
        subprocess.check_call(["/etc/kernel/postinst.d/zz-update-systemd-boot"])
    except subprocess.CalledProcessError as err:
        sys.exit(err.returncode)


def _get_devices():
    """Get devices from LSBLK"""
    try:
        devices = json.loads(subprocess.check_output(["lsblk", "--output",
                                                      "PATH,TYPE,MOUNTPOINT,PARTUUID",
                                                      "--json",
                                                      "--paths"]).decode().replace("I", "i"))
    except subprocess.CalledProcessError as err:
        __eprint__(ERROR + "CANNOT GET ROOT PARTITION UUID. LSBLK FAILED." + CLEAR)
        __eprint__("The error was: ")
        __eprint__(err.output)
        sys.exit(err.returncode)
    devices = devices["blockdevices"]
    for each in range(len(devices) - 1, -1, -1):
        if "loop" == devices[each]["type"]:
            del devices[each]
    return devices


def get_UUID():
    """Get UUID for the root partition"""
    # Get root partition
    uuid = ""
    devices = _get_devices()
    for each in devices:
        if each["mountpoint"] == "/":
            uuid = each["partuuid"]
            break
    return uuid


def get_boot_entries():
    """Get bootloader entries"""
    entries = subprocess.check_output(["bootctl", "list", "--no-pager"]).decode().split("\n")
    output = {}
    name = ""
    for each in entries:
        if "title: " in each:
            if "(default)" in each:
                output[" ".join(each.split()[1:])[:-10]] = {"default":True}
                name = " ".join(each.split()[1:])[:-10]
            else:
                output[" ".join(each.split()[1:])] = {"default":False}
                name = " ".join(each.split()[1:])
        elif "id: " in each:
            output[name]["id"] = each.split()[-1]
    return output


def get_default_boot_entry():
    """Get default bootloader entry"""
    entries = get_boot_entries()
    for each in entries:
        if entries[each]["default"] is True:
            return entries[each]["id"]


def update_defaults_file(default_entry):
    """Write default bootloader entry to config file"""
    DEFAULTS_FILE_ADDON = """# This file defines the default boot entry that systemd-boot should be using.
    # It only reads the first line, but these other lines are being commented out like
    # in a shell script because if this file gets renamed and used for other purposes,
    # then this syntax will be honored
    #
    # That first line needs to be the Entry ID you want to be default from
    # `bootctl list`
    #
    # If you don't want systemd-boot-manager changing the default entry, just comment that
    # first line out and it will not do anything."""
    try:
        with open(DEFAULTS_FILE, "w") as conf:
            if default_entry is not None:
                conf.write(default_entry)
            else:
                conf.write("# Drauger_OS.conf")
            conf.write("\n")
            conf.write(DEFAULTS_FILE_ADDON)
    except (FileNotFoundError, PermissionError) as err:
        __eprint__(ERROR + "An Unwarrented error has occured. Please try again later." + CLEAR)
        sys.exit(2)


def generate_settings(uuid, default_entry=None):
    """Generate settings based off the current system,
    Or, passed settings
    """
    try:
        with open(UUID_FILE, "w") as conf:
            conf.write(uuid)
    except (FileNotFoundError, PermissionError) as err:
        __eprint__(ERROR + "An Unwarrented error has occured. Please try again later." + CLEAR)
        sys.exit(2)
    update_defaults_file(default_entry)


def _check_default_entry():
    """Confirm default boot entry is correct"""
    intended_default = "#"
    with open(DEFAULTS_FILE, "r") as conf:
        intended_default = conf.read().split()[0]
    default = get_default_boot_entry()
    if default == intended_default:
        return True
    elif intended_default != "#":
        return False


def _check_uuid():
    """Check correct UUID is in use"""
    with open(UUID_FILE, "r") as conf:
        uuid_stored = conf.read()
    if uuid_stored[-1] == "\n":
        uuid_stored = uuid_stored[:-1]
    uuid_generated = get_UUID()
    return (uuid_stored == uuid_generated)


def check():
    """Check systemd-boot-manager settings"""
    # This is like a report for use to use to explain to the user later
    # How their config is doing
    report = {"UUID":None, "DEFAULT": None}
    if os.path.isfile(UUID_FILE):
        report["UUID"] = _check_uuid()
    if os.path.isfile(DEFAULTS_FILE):
        report["DEFAULT"] = _check_default_entry()

    print(BLUE + "RUNNING CONFIGURATION CHECKS" + CLEAR)
    print("-" * 20, "\n")
    errors = 0
    for each in report:
        if each == "UUID":
            if report["UUID"]:
                print(BLUE + "UUID: " + GREEN + "GOOD" + CLEAR)
            else:
                print(BLUE + "UUID: " + RED + "MISMATCH" + CLEAR)
                errors += 1
        if each == "DEFAULT":
            if report["DEFAULT"] is True:
                print(BLUE + "DEFAULT BOOTLOADER ENTRY: " + GREEN + "GOOD" + CLEAR)
            elif report["DEFAULT"] is False:
                print(BLUE + "DEFAULT BOOTLOADER ENTRY: " + RED + "MISMATCH" + CLEAR)
                errors += 1
            else:
                print(BLUE + "DEFAULT BOOTLOADER ENTRY: " + YELLOW + "NOT CONTROLLING" + CLEAR)
    if errors != 0:
        print(RED + "\nTHERE ARE ERRORS!\n" + CLEAR)
        print("We suggest running `sudo update-systemd-boot --repair' to fix these issues.")
        sys.exit(1)


def repair():
    """Repair systemd-boot-manager and systemd-boot settings"""
    if not is_root():
        __eprint__(ERROR + "You need to be run this program as root to repair your settings." + CLEAR)
        sys.exit(2)
    print(BLUE + "INITIATING CONFIGURATION REPAIR" + CLEAR)
    print("-" * 20, "\n")
    # Get UUID
    print(BLUE + "GETTING APPRORIATE SETTINGS" + CLEAR)
    UUID = get_UUID()
    # Get default entry
    default_entry = get_default_boot_entry()
    # Make them permanent
    print(BLUE + "WRITING SETTINGS TO DISK" + CLEAR)
    generate_settings(UUID, default_entry=default_entry)
    print("\n")
    check()


def set_as_default_entry(entry):
    """Set 'entry' as the default bootloader entry"""
    if not is_root():
        __eprint__(ERROR + "You need to be run this program as root to repair your settings." + CLEAR)
        sys.exit(2)
    entries = get_boot_entries()
    for each in entries:
        if entries[each]["id"] == entry:
            if entries[each]["default"] is True:
                __eprint__(BLUE + "Already Default Entry" + CLEAR)
                sys.exit()
            # Set as default here
            update_defaults_file(entry)
            try:
                subprocess.check_call(["bootctl", "set-default", entry])
            except subprocess.CalledProcessError as err:
                __eprint__(ERROR + "CANNOT SET INTENDED DEFAULT" + CLEAR)
                __eprint__("Error was:")
                __eprint__(err.output)
                sys.exit(err.returncode)
            print(GREEN + "SUCCESS!" + CLEAR)
            sys.exit()
    __eprint__(ERROR + "ID Not found. Please provide a valid ID. IDs can be found using `update-systemd-boot --list'.")


def get_settings():
    """Get current settings"""
    conf = {"UUID": None, "DEFAULT_ENTRY": None}
    if _check_default_entry():
        conf["DEFAULT_ENTRY"] = get_default_boot_entry()
    else:
        raise ValueError("Settings corrupted! Repair recommended!")
    if _check_uuid():
        conf["UUID"] = get_UUID()
    else:
        raise ValueError("Settings corrupted! Repair recommended!")
    return conf


def show_settings():
    """Print current settings"""
    print(GREEN + "CURRENT SETTINGS" + CLEAR)
    print("-" * 20, "\n")
    try:
        settings = get_settings()
    except ValueError:
        print(RED + "\nERROR: SETTINGS LIKELY CORRUPTED!" + CLEAR)
        print(RED + "\nERROR: REPAIR THIS ISSUE USING THE -r FLAG!\n" + CLEAR)
        sys.exit(2)
    print(BLUE + "DEFAULT BOOT ENTRY:\t" + CLEAR + settings["DEFAULT_ENTRY"])
    devices = _get_devices()
    for each in devices:
        if each["partuuid"] == settings["UUID"]:
            print(BLUE + "ROOT PARTITION:\t\t" + CLEAR + each["path"])


# get length of argv
ARGC = len(sys.argv)
if ARGC >= 2:
    if sys.argv[1] in ("-h", "--help"):
        print(HELP)
    elif sys.argv[1] in ("-v", "--version"):
        print(VERSION)
    elif sys.argv[1] in ("-u", "--update"):
        trigger()
    elif sys.argv[1] in ("-c", "--check"):
        check()
    elif sys.argv[1] in ("-r", "--repair"):
        repair()
    elif sys.argv[1] in ("-s", "--show-settings"):
        show_settings()
    elif sys.argv[1] in ("-l", "--list"):
        entries = get_boot_entries()
        print(BLUE + "BOOT LOADER ENTRIES" + CLEAR)
        print("-" * 20, "\n")
        for each in entries:
            print("\t-  " + each)
            print("\t\tID: " + entries[each]["id"])
            print("\t\tDefault: " + str(entries[each]["default"]), "\n")
    elif sys.argv[1] in ("-d", "--default"):
        if len(sys.argv) < 3:
            __eprint__(ERROR + "No default specified." + CLEAR)
            sys.exit(2)
        set_as_default_entry(sys.argv[2])
    elif sys.argv[1] in ("-e", "--enable"):
        if not is_root():
            __eprint__(ERROR + "You need to be run this program as root to enable systemd-boot-manager." + CLEAR)
            sys.exit(2)
        if os.path.isfile("/etc/systemd-boot-manager/disable.flag"):
            os.remove("/etc/systemd-boot-manager/disable.flag")
            print(SUCCESS + "systemd-boot-manager enabled!" + CLEAR)
            sys.exit(0)
        else:
            print(WARNING + "systemd-boot-manager already enabled." + CLEAR)
            sys.exit(1)
    elif sys.argv[1] == "--disable":
        if not is_root():
            __eprint__(ERROR + "You need to be run this program as root to disable systemd-boot-manager." + CLEAR)
            sys.exit(2)
        if os.path.isfile("/etc/systemd-boot-manager/disable.flag"):
            __eprint__(WARNING + "systemd-boot-manager already disabled." + CLEAR)
            sys.exit(1)
        else:
            with open("/etc/systemd-boot-manager/disable.flag", "w+") as file:
                file.write("")
            print(SUCCESS + "systemd-boot-manager disabled!" + CLEAR)
            sys.exit(0)
    else:
        __eprint__(ERROR + "Flag: " + sys.argv[1] + " Not understood.")
        print(HELP)
        sys.exit(1)
else:
    trigger()
