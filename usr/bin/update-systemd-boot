#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  update-systemd-boot
#
#  Copyright 2020 Thomas Castleman <contact@draugeros.org>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#
"""Trigger zz-update-systemd-boot"""
from __future__ import print_function
import sys
import subprocess
import os

GREEN = "\033[92m"
RED = "\033[91m"
CLEAR = "\033[0m"
YELLOW = "\033[93m"
BLUE = '\033[94m'
ERROR = RED + "ERROR: " + CLEAR
WARNING = YELLOW + "WARNING: " + CLEAR

VERSION = "0.0.8-alpha0"
HELP = """systemd-boot-manager, Version: %s

\t-c, --check\t\tCheck systemd-boot-manager settings. (Not yet implemented)
\t-h, --help\t\tPrint this help dialog and exit.
\t-r, --repair\t\tRepair systemd-boot-manager settings and systemd-boot. (Not yet implemented)
\t-u, --update\t\tUpdate systemd-boot, default action.
\t-v, --version\t\tPrint current version and exit.""" % (VERSION)


def __eprint__(*args, **kwargs):
    """Make it easier for us to print to stderr"""
    print(*args, file=sys.stderr, **kwargs)


if sys.version_info[0] == 2:
    __eprint__(ERROR + "Please run with Python 3 as Python 2 is End-of-Life.")
    sys.exit(2)


def trigger():
    """Trigger systemd-boot update"""
    if os.geteuid() != 0:
        __eprint__(ERROR + "You need to be run this program as root to update systemd-boot.")
        sys.exit(2)
    try:
        subprocess.check_call(["/etc/kernel/postinst.d/zz-update-systemd-boot"])
    except subprocess.CalledProcessError as err:
        sys.exit(err.returncode)


def generate_settings(default_entry=None):
    """Generate settings based off the current system,
    Or, passed settings
    """
    __eprint__(RED + "NOT YET IMPLEMENTED" + CLEAR)
    sys.exit(1)


def delete_settings():
    """delete current settings, after making a back up"""
    __eprint__(RED + "NOT YET IMPLEMENTED" + CLEAR)
    sys.exit(1)


def check():
    """Check systemd-boot-manager settings"""
    __eprint__(RED + "NOT YET IMPLEMENTED" + CLEAR)
    sys.exit(1)


def repair():
    """Repair systemd-boot-manager and systemd-boot settings"""
    __eprint__(RED + "NOT YET IMPLEMENTED" + CLEAR)
    sys.exit(1)


# get length of argv
ARGC = len(sys.argv)
if ARGC >= 2:
    if sys.argv[1] in ("-h", "--help"):
        print(HELP)
    elif sys.argv[1] in ("-v", "--version"):
        print(VERSION)
    elif sys.argv[1] in ("-u", "--update"):
        trigger()
    elif sys.argv[1] in ("-c", "--check"):
        check()
    elif sys.argv[1] in ("-r", "--repair"):
        repair()
    else:
        __eprint__(ERROR + "Flag: " + sys.argv[1] + " Not understood.")
        print(HELP)
        sys.exit(1)
else:
    trigger()
